from getPrimedRegion import *
from kmerCounter import *
import multiprocessing



SAMPLE = "SvdB11d2-MitoTrackerThird-Satellites-Adult"
TYPE = "rna"
DIR = "/hpc/hub_oudenaarden/edann/hexamers/rnaseq/mouse/test_snakemake"
REFGEN = "/hpc/hub_oudenaarden/edann/hexamers/rnaseq/mouse/mm10_RefSeq_genes_clean_ERCC92_polyA_10_masked_eGFP_Mito.fa"
CELLS = ['cell' + str(n) for n in range(1,385)]
# SCRIPT = "getPrimedRegion.py"


rule all:
    input:
        primedfa = expand('{dir}/{sample}.primedreg.fa', dir=DIR, sample=SAMPLE),
        cellAbundance = expand('{dir}/{sample}.cellAbundance.noN.csv', dir=DIR, sample=SAMPLE)
        # predictedDg=expand('{dir}/predictedDg/{sample}_{cell}_ptDg_qual.csv', cell=CELLS, dir=DIR, sample=SAMPLE),
        # numReads=expand('{dir}/{sample}.numReads.txt', sample=SAMPLE, dir=DIR)
        # # split_bam=expand("bam/{sample}_{read}_bismark_bt2.bam", sample=SAMPLE, read=READS)
        # bam1=expand("bam/{sample}_1_bismark_bt2.bam", sample=SAMPLE)


rule get_primed_region:
    input:
        bam='/hpc/hub_oudenaarden/aalemany/emma-adi/mouse/{sample}.sam.gz',
        refgen=REFGEN
    output:
        primedfa= '{dir}/{sample}.primedreg.fa'
    params:
        t=TYPE
    threads: 1
    run:
        get_template_fasta({input.bam}, {input.refgen}, {wildcard.dir}, {params.t})

rule kmer_count:
    input:
        coutc='/hpc/hub_oudenaarden/aalemany/emma-adi/mouse/{sample}.coutc.csv',
        refgen=REFGEN
    output:
        cellAbundance='{dir}/{sample}.cellAbundance.noN.csv'
    # params:
    #     out=DIR
    threads: 8
    run:
        countT = pd.read_csv({input.coutc}, sep='\t', index_col=0)
        countDic = count_kmers_refgen({input.fasta})

        workers = multiprocessing.Pool({threads})
        finalKmerCounts = collections.Counter()

        cellDic={}
        for cellCounter in workers.imap_unordered(cellKmersAbundance, [ (countDic, countT, cell) for cell in countT]):
            if len(cellCounter.keys())==1:
                for cell,counter in cellCounter.items():
                    cellDic[cell]=counter
            else:
                print('Something wrong...')

        sample = {input.coutc}.split('/')[-1].split('.coutc')[0]
        if args.o:
            outpath = args.o
        else:
            outpath = '/'.join({input.refgen}.split('/')[:-1]) + '/'

        ab = pd.DataFrame.from_dict(cellDic)
        noN = ab.T[[i for i in ab.index if 'N' not in i and 'Y' not in i]].T
        print(noN)
        outputTab = noN.to_csv(outpath + '/' + sample +'.cellAbundance.noN.csv')

# rule num_reads:
#     input:
#         bam='/hpc/hub_oudenaarden/aalemany/emma-adi/mouse/{sample}.sam.gz'
#     output:
#         numReads='{dir}/{sample}.numReads.txt'
#     # params:
#     #     out=DIR
#     threads: 1
#     script:
#         "numReadsPerCell.py -o {wildcards.dir} {input.bam}"
#
# rule pt_counts:
#     input:
#         bam='/hpc/hub_oudenaarden/aalemany/emma-adi/mouse/{sample}.sam.gz',
#         primedfa= '{dir}/{sample}.primedreg.fa'
#     output:
#         ptCounts=expand('{{dir}}/ptCounts/{{sample}}.{cell}.ptCounts.qualFilt.parallel.csv', cell=CELLS)
#     threads: 10
#     script:
#         "cellPrimerTemplTab.py -o {input.bam} {input.primedfa}"
#
# rule predict_dg:
#     input:
#         ptCounts='{dir}/ptCounts/{sample}.{cell}.ptCounts.qualFilt.parallel.csv',
#         cellAbundance='{dir}/{sample}.cellAbundance.noN.csv'
#     output:
#         predictedDg='{dir}/predictedDg/{sample}_{cell}_ptDg_qual.csv'
#     threads: 1
#     script:
#         "ptModel.py {input.ptCounts} {input.cellAbundance}"
